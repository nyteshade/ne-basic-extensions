/exit
Object.setPrototypeOf(m, pop)
pop[Symbol.toStringTag] = 'Map'
pop[Symbol.toStringTag] = 'Map
Object.setPrototypeOf(m, p)
m2 = new Map()
m.name
Object.setPrototypeOf(m, pop)
pop = new Proxy(p, { get(t,p,r) { if (t.has.call(m, p)) { return t.get.call(m, p) } return Reflect.get(t,p,r) }, has(t,p) { if (t.has.call(m, p)) { return true } return Reflect.has(t,p) } })
p.has.call(m, 'name')
p.has('name')
Object.setPrototypeOf(m, pop)
pop = new Proxy(p, { get(t,p,r) { if (m.has(p)) { return m.get(p) } return Reflect.get(t,p,r) }, has(t,p) { if (m.has(p)) { return true } return Reflect.has(t,p) } })
Object.setPrototypeOf(m, pop)
pop = new Proxy(p, { get(t,p,r) { if (t.has(p)) { return t.get(p) } return Reflect.get(t,p,r) }, has(t,p) { if (t.has(p)) { return true } return Reflect.has(t,p) } })
np = Object.create(p)
p = Object.getPrototypeOf(m)
m.get('name')
m = new Map([['name', 'Brielle']])
ObjectPatches.patchesOwner
ObjectPatches.patchsOwner
ObjectPatches.patchCount
[...ObjectPatches.patchEntries]
ObjectPatches = Patches.get(Object)
Patches.get(Object)
[...Patches.keys()]
Object.keys(Patches)
Patches.keys()
var { Extensions, Patches } = (await import ('./dist/cjs/index.js'))
(await import ('./dist/cjs/index.js')).Patchest import ('./dist/cjs/index.js')).Extensionsex.js').Extensions.js').Patchesx.js').patchesndex.js')mport ('.')og','This is being logged'], ['error', 'But something terrible happened'])p('Fun', ['log','This is being logged'], ['error', 'But something terrible happened']).print()ics','underline']).print()int() { console.log(this) }brave new world', ['italics','underline']))['italics','underline'])